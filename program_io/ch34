#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/wait.h>

int pwncollege() {
    pid_t pid;

    // Fork a child process
    pid = fork();

    if (pid == -1) {
        perror(fork failed);
        exit(1);
    }
    else if (pid == 0) {
        // Child process

        // Open the file for writing
        int input_fd = open(/tmp/svjlxr, O_WRONLY );
        
        // Redirect standard output to the file
        dup2(input_fd, 1);
        
        // Close the original file descriptor for the file
        close(input_fd);

        // Now execute the program
        char *argv[] = {/challenge/embryoio_level34, NULL}; // Program name and NULL terminator
        char *envp[] = {NULL}; // Environment variables
        execve(/challenge/embryoio_level34, argv, envp);

        // execve only returns if there's an error
        perror(execve failed);
        exit(1);
    }
    else {
        // Parent process
        int status;
        waitpid(pid, &status, 0);
        return 0;
    }
}

int main() {
    return pwncollege();
}

